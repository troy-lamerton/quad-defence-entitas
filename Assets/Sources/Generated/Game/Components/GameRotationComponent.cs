//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RotationComponent rotation { get { return (RotationComponent)GetComponent(GameComponentsLookup.Rotation); } }
    public bool hasRotation { get { return HasComponent(GameComponentsLookup.Rotation); } }

    public void AddRotation(float newX, float newY, float newZ) {
        var index = GameComponentsLookup.Rotation;
        var component = CreateComponent<RotationComponent>(index);
        component.x = newX;
        component.y = newY;
        component.z = newZ;
        AddComponent(index, component);
    }

    public void ReplaceRotation(float newX, float newY, float newZ) {
        var index = GameComponentsLookup.Rotation;
        var component = CreateComponent<RotationComponent>(index);
        component.x = newX;
        component.y = newY;
        component.z = newZ;
        ReplaceComponent(index, component);
    }

    public void RemoveRotation() {
        RemoveComponent(GameComponentsLookup.Rotation);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.MatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRotation;

    public static Entitas.IMatcher<GameEntity> Rotation {
        get {
            if(_matcherRotation == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Rotation);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRotation = matcher;
            }

            return _matcherRotation;
        }
    }
}
